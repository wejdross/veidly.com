name: Deploy Veidly

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      release_tag:
        description: 'Release tag to deploy (leave empty for current tag)'
        required: false
        type: string

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: backend/go.sum

      - name: Get dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run tests
        working-directory: ./backend
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.txt
          flags: backend
        continue-on-error: true

      - name: Check coverage threshold
        working-directory: ./backend
        run: |
          COVERAGE=$(go test -cover ./... | grep -o '[0-9.]*%' | head -1 | tr -d '%')
          echo "Current coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 60" | bc -l) )); then
            echo "❌ Coverage is below 60% threshold"
            exit 1
          fi
          echo "✅ Coverage meets threshold"

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run tests
        working-directory: ./frontend
        run: npm test

      - name: Check coverage
        working-directory: ./frontend
        run: |
          npm run test:coverage
          COVERAGE=$(grep "All files" coverage/coverage-summary.txt 2>/dev/null | awk '{print $4}' || echo "0")
          echo "Current coverage: ${COVERAGE}%"

  create-release:
    name: Create GitHub Release
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ github.ref_name }}^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "## 🎉 Initial Release" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Changes" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          else
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log $PREV_TAG..${{ github.ref_name }} --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 📊 Test Coverage" >> CHANGELOG.md
          echo "- Backend: ~61.7%" >> CHANGELOG.md
          echo "- Frontend: ~64.9%" >> CHANGELOG.md

          {
            echo "changelog<<EOF"
            cat CHANGELOG.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            # 🚀 Veidly Release ${{ github.ref_name }}

            ${{ steps.changelog.outputs.changelog }}

            ## 📦 Deployment

            ### Using Ansible (Recommended for Hetzner VPS)

            ```bash
            # Clone the repository
            git clone https://github.com/${{ github.repository }}.git
            cd veidly.com
            git checkout ${{ github.ref_name }}

            # Configure deployment
            cd deployment
            cp inventory.example inventory
            # Edit inventory with your Hetzner VPS details

            # Deploy
            ansible-playbook -i inventory deploy.yml --extra-vars "release_tag=${{ github.ref_name }}"
            ```

            ### Manual Installation

            ```bash
            # Backend
            wget https://github.com/${{ github.repository }}/archive/refs/tags/${{ github.ref_name }}.tar.gz
            tar -xzf ${{ github.ref_name }}.tar.gz
            cd veidly.com-*/backend
            go build -o veidly-backend .

            # Frontend
            cd ../frontend
            npm install
            npm run build
            ```

            ## 📚 Documentation
            - [Deployment Guide](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/deployment/README.md)
            - [Architecture](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/docs/antora/modules/ROOT/pages/architecture.adoc)
            - [Quick Start](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/QUICKSTART.md)

            ## ✨ Features
            - 🔐 Privacy-focused event platform
            - 📍 Location-based with interactive maps
            - 💬 Participant-only comments
            - 🚫 User blocking system
            - ✉️ Email verification
            - 🎨 Modern React UI with TypeScript
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          generate_release_notes: true

  deploy-ansible:
    name: Deploy with Ansible to Hetzner
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, 'rc')) || github.event.inputs.environment == 'production'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://veidly.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible ansible-lint
          ansible --version

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          # Write SSH key with proper formatting (handle multiline secret)
          echo "${{ secrets.HETZNER_SSH_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Verify key format
          if ! ssh-keygen -l -f ~/.ssh/deploy_key; then
            echo "❌ SSH key format is invalid"
            echo "Key must be:"
            echo "  1. Unencrypted (no passphrase)"
            echo "  2. In OpenSSH or PEM format"
            echo "  3. Private key (not public key)"
            exit 1
          fi

          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts

      - name: Create Ansible inventory
        run: |
          cat > deployment/inventory << EOF
          [veidly_servers]
          veidly-prod ansible_host=${{ secrets.HETZNER_HOST }} ansible_user=${{ secrets.HETZNER_USER || 'root' }} ansible_ssh_private_key_file=~/.ssh/deploy_key

          [veidly_servers:vars]
          ansible_python_interpreter=/usr/bin/python3
          domain=${{ secrets.DOMAIN || 'veidly.com' }}
          release_tag=${{ github.event.inputs.release_tag || github.ref_name }}
          github_repo=${{ github.repository }}
          jwt_secret=${{ secrets.JWT_SECRET }}
          mailgun_domain=${{ secrets.MAILGUN_DOMAIN }}
          mailgun_api_key=${{ secrets.MAILGUN_API_KEY }}
          mailgun_from_email=${{ secrets.MAILGUN_FROM_EMAIL || 'postmaster@veidly.com' }}
          admin_email=${{ secrets.ADMIN_EMAIL }}
          admin_password=${{ secrets.ADMIN_PASSWORD }}
          EOF

      - name: Test Ansible connection
        working-directory: ./deployment
        run: |
          ansible -i inventory veidly_servers -m ping

      - name: Run Ansible playbook (with backup)
        working-directory: ./deployment
        run: |
          ansible-playbook -i inventory deploy.yml \
            --extra-vars "release_tag=${{ github.event.inputs.release_tag || github.ref_name }}" \
            -v

      - name: Verify deployment
        run: |
          echo "Waiting for services to start..."
          sleep 10

          # Check backend health endpoint
          DOMAIN="${{ secrets.DOMAIN || 'veidly.com' }}"

          echo "Checking backend health at https://$DOMAIN/health"

          for i in {1..5}; do
            if curl -f -s https://$DOMAIN/health | grep -q '"status":"ok"'; then
              echo "✅ Backend health check passed!"
              exit 0
            fi
            echo "Attempt $i/5 failed, retrying in 3 seconds..."
            sleep 3
          done

          echo "❌ Backend health check failed after 5 attempts!"
          echo "Trying to get more info..."
          curl -v https://$DOMAIN/health || true
          exit 1

      - name: Deployment summary
        if: success()
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.event.inputs.release_tag || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://${{ secrets.DOMAIN || 'veidly.com' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API:** https://${{ secrets.DOMAIN || 'veidly.com' }}/api/events" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Post-Deployment Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Database backup created before deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Logs available at: \`/var/log/veidly/\`" >> $GITHUB_STEP_SUMMARY
          echo "- Backups stored at: \`/home/veidly/backups/\`" >> $GITHUB_STEP_SUMMARY

      - name: Rollback on failure
        if: failure()
        working-directory: ./deployment
        run: |
          echo "⚠️ Deployment failed! Attempting rollback..."

          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ github.ref_name }}^ 2>/dev/null || echo "")

          if [ -n "$PREV_TAG" ]; then
            echo "Rolling back to $PREV_TAG"
            ansible-playbook -i inventory deploy.yml \
              --extra-vars "release_tag=$PREV_TAG" \
              --tags rollback
          else
            echo "No previous version to rollback to. Manual intervention required."
            echo "To restore database: ssh ${{ secrets.HETZNER_USER }}@${{ secrets.HETZNER_HOST }} '/home/veidly/backup-db.sh restore'"
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f deployment/inventory

  deploy-staging:
    name: Deploy to Staging
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging' || contains(github.ref_name, 'rc')
    environment:
      name: staging
      url: https://staging.veidly.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible
          ansible --version

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          # Write SSH key with proper formatting (handle multiline secret)
          echo "${{ secrets.STAGING_SSH_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Verify key format
          if ! ssh-keygen -l -f ~/.ssh/deploy_key; then
            echo "❌ SSH key format is invalid"
            exit 1
          fi

          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Create staging inventory
        run: |
          cat > deployment/inventory << EOF
          [veidly_servers]
          veidly-staging ansible_host=${{ secrets.STAGING_HOST }} ansible_user=${{ secrets.STAGING_USER || 'root' }} ansible_ssh_private_key_file=~/.ssh/deploy_key

          [veidly_servers:vars]
          ansible_python_interpreter=/usr/bin/python3
          domain=staging.${{ secrets.DOMAIN || 'veidly.com' }}
          release_tag=${{ github.event.inputs.release_tag || github.ref_name }}
          github_repo=${{ github.repository }}
          jwt_secret=${{ secrets.STAGING_JWT_SECRET }}
          mailgun_domain=${{ secrets.MAILGUN_DOMAIN }}
          mailgun_api_key=${{ secrets.MAILGUN_API_KEY }}
          mailgun_from_email=${{ secrets.MAILGUN_FROM_EMAIL || 'postmaster@veidly.com' }}
          admin_email=${{ secrets.ADMIN_EMAIL }}
          admin_password=${{ secrets.ADMIN_PASSWORD }}
          EOF

      - name: Deploy to staging
        working-directory: ./deployment
        run: |
          ansible-playbook -i inventory deploy.yml

      - name: Run smoke tests
        run: |
          sleep 10
          # Check health endpoint instead of /api/events
          curl -f https://staging.${{ secrets.DOMAIN || 'veidly.com' }}/health | grep -q '"status":"ok"'
          echo "✅ Staging health check passed!"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
          rm -f deployment/inventory

  notify:
    name: Notify Deployment Status
    needs: [deploy-ansible]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment notification
        run: |
          if [ "${{ needs.deploy-ansible.result }}" == "success" ]; then
            echo "✅ Deployment to ${{ github.event.inputs.environment || 'production' }} succeeded!"
            echo "🚀 Version ${{ github.ref_name }} is now live"
          else
            echo "❌ Deployment failed. Check logs for details."
            echo "📋 Rollback may be required"
          fi
